/*
 * Controller class 
 * Created on $today.date ( Time $today.time )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import ${ENTITY_PKG}.${beanClass.name};
## Clé primaire
#if ( $beanClass.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${beanClass.name}Id;
#set( $keyType = "${beanClass.name}Id" )
#set( $keyName = "id" )
#set( $keySetter = "setId" )
#set( $keyGetter = "getId" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.wrapperType" )
#set( $keyName = "$field.formatedName(0)" )
#set( $keyField = $field )
#set( $keySetter = $field.setter )
#set( $keyGetter = $field.getter )
#end
#end
import ${SERVICE_PKG}.${beanClass.name}Service;

/**
 * ${beanClass.name}.
 */
@Controller
@RequestMapping("/${beanClass.name.toLowerCase()}Form")
public class ${beanClass.name}FormController 
{
	@Resource
    private ${beanClass.name}Service ${beanClass.name.toLowerCase()}Service;

	@InitBinder
	protected void initBinder(WebDataBinder binder) {
	    binder.registerCustomEditor(Integer.class, new CustomNumberEditor(Integer.class, true));
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String save(@ModelAttribute("${beanClass.name.toLowerCase()}Form") ${beanClass.name} ${beanClass.name.toLowerCase()}, BindingResult result) {
		if (!result.hasErrors()) {
			${beanClass.name.toLowerCase()}Service.save(${beanClass.name.toLowerCase()});
		}else{
			System.out.println(result.getAllErrors().get(0).getDefaultMessage());
		}
		return "redirect:/${beanClass.name.toLowerCase()}/list";
	}

	@RequestMapping(value = "/delete/{$keyName}")
	public String delete(@ModelAttribute("${beanClass.name.toLowerCase()}/delete") ${beanClass.name} ${beanClass.name.toLowerCase()}, @PathVariable("$keyName") $keyType $keyName) {
		if ($keyName != null){
			${beanClass.name.toLowerCase()}Service.delete($keyName);
		}
		return "redirect:/${beanClass.name.toLowerCase()}/list";
	}
	
	@RequestMapping(value = "/search")
	public ModelAndView search(@ModelAttribute("${beanClass.name.toLowerCase()}Form") ${beanClass.name} ${beanClass.name.toLowerCase()}, BindingResult result) {
		ModelAndView mav = new ModelAndView("${beanClass.name.toLowerCase()}/${beanClass.name.toLowerCase()}List");
		Map<String, Object> criteria = new HashMap<String, Object>();
		// TODO Définir les critères
		List<${beanClass.name}> list = ${beanClass.name.toLowerCase()}Service.search(criteria);
		mav.addObject("list${beanClass.name.toLowerCase()}s", list);
		return mav;
	}
	
	@RequestMapping("/clear")
	public ModelAndView clear() {
		return new ModelAndView("${beanClass.name.toLowerCase()}/${beanClass.name.toLowerCase()}", "${beanClass.name.toLowerCase()}Form", new ${beanClass.name}());
	}
}
