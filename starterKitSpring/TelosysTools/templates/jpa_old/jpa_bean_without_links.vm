/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Id.java", $target.folder, "jpa/jpa_bean_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

#foreach( $import in $entity.imports )
import $import;
#end
## Cl√© primaire
#if ( $beanClass.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${beanClass.name}Id;
#set( $keyType = "${beanClass.name}Id" )
#set( $keyName = "id" )
#set( $keySetter = "setId" )
#set( $keyGetter = "getId" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.wrapperType" )
#set( $keyName = "$field.formatedName(0)" )
#set( $keyField = $field )
#set( $keySetter = $field.setter )
#set( $keyGetter = $field.getter )
#end
#end

import javax.persistence.*;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
##--------------------------------------------------------------------------------------------------------
## Data fields list ( list of fields used as bean property with getter/setter )
## Data fields = fields not in Primary Key    
## #set( $dataFields = $entity.nonKeyAttributes )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )
##--------------------------------------------------------------------------------------------------------

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 */
@XmlRootElement  // JAXB annotation for REST Web Services
@XmlAccessorType(XmlAccessType.PROPERTY) // JAXB accessor = getter/setter pair
$entity.jpaAnnotations
// Define named queries here
// @NamedQueries ( {
//  @NamedQuery ( name="${entity.name}.query1", query="SELECT x FROM ${entity.name} x WHERE  " ),
//  @NamedQuery ( name="${entity.name}.query2", query="SELECT x FROM ${entity.name} x WHERE  " )
// } )
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
	@EmbeddedId
    private $keyType $keyName = new $keyType();

#else 
$keyField.jpaAnnotations(4)
    private $keyType $keyName#if($keyField.hasInitialValue()) = ${keyField.initialValue}#end;

#end
##-- ENTITY DATA FIELDS 
#foreach( $field in $dataFields )
$field.jpaAnnotations(4)
    private $field.wrapperType $field.formatedName(0) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end    
##-- GETTER & SETTER FOR THE COMPOSITE KEY 
	public ${keyType} ${keyGetter}() {
        return ${keyName};
    }
 
    public void ${keySetter}(${keyType} ${keyName}) {
        this.${keyName} = ${keyName};
    }

##-- GETTERS & SETTERS FOR FIELDS
#foreach( $field in $dataFields )
#if ( $field.setter )    public void ${field.setter}( $field.wrapperType $field.name )
    {
        this.$field.name = $field.name;
    }

#end
#if ( $field.getter )    public $field.wrapperType ${field.getter}()
    {
        return this.$field.name;
    }

#end
#end  
    public String toString()
    {
#set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT, $const.NOT_IN_SELECTED_LINKS ) )    
$entity.toStringMethodCodeLinesWithKey(8, $attributes, $keyName) 
## The "key" is used only if composite key
#foreach( $field in $entity.getAttributesByCriteria( $const.TEXT ) )
		// $field.name is not in toString because it's a "long text" field
#end  
    }

}
