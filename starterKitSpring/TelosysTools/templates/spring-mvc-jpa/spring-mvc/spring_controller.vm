## Macro
## Champs de la clé primaire qui ne sont pas dans les liens
#macro( isFieldUsedInLinks, $field, $links )
#set( $isFieldUsedInLinks = false )
#foreach( $link in $links )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $isFieldUsedInLinks = true )
#end
#end
#end
#end
#end
## Liens utilisant les champs
#macro( isLinkUsedByFields, $link, $fields)
#set( $isLinkUsedByFields = false )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
#foreach( $field in $fields )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $isLinkUsedByFields = true )
#end
#end
#end
#end
#end
## Informations sur la clé primaire d'une entité
#macro( defineKeyInfoForEntity, $entity )
#if ( $entity.hasCompositePrimaryKey() )
#set( $keyType = "${entity.name}Id" )
#set( $keyName = "id" )
#set( $keySetter = "setId" )
#set( $keyGetter = "getId" )
#else
#set( $keyField = $entity.keyAttributes[0] )
#set( $keyType = "$keyField.wrapperType" )
#set( $keyName = "$keyField.formatedName(0)" )
#set( $keySetter = $keyField.setter )
#set( $keyGetter = $keyField.getter )
#end
#end
#defineKeyInfoForEntity( $entity )
##--------------------------------------------------------------------------------------------------------
## PRIMARY KEY IN URL
## keyURLPath
## keyPathVariable
## keyGetterToArg
#set( $keyURLPath = "")
#set( $keyPathVariable = "")
#set( $keyGetterToArg = "")
#if ( $entity.hasCompositePrimaryKey() )
## FIELDS
#foreach( $field in $entity.keyAttributes )
#isFieldUsedInLinks( $field, $entity.selectedLinks )
#if( ! $isFieldUsedInLinks )
#if( $keyURLPath != "" ) #set( $keyURLPath = $keyURLPath + "/" ) #end
#if( $keyPathVariable != "" ) #set( $keyPathVariable = $keyPathVariable + ", " ) #end
#if( $keyGetterToArg != "" ) #set( $keyGetterToArg = $keyGetterToArg + ", " ) #end
#set( $keyURLPath = $keyURLPath+"{"+${field.formatedName(0)}+"}" )
#set( $keyPathVariable = $keyPathVariable+"@PathVariable("""+${field.formatedName(0)}+""") "+${field.wrapperType}+" "+${field.formatedName(0)} )
#set( $keyGetterToArg = $keyGetterToArg+${entity.name.toLowerCase()}+"."+${field.getter}+"()" )
#end
#end
## LINKS
#foreach( $link in $entity.selectedLinks )
#isLinkUsedByFields( $link, $entity.keyAttributes )
#if( $isLinkUsedByFields )
#set( $linkEntity = $model.getEntityByClassName($link.targetEntity) )
#foreach( $field in $linkEntity.keyAttributes )
#if( $keyURLPath != "" ) #set( $keyURLPath = $keyURLPath + "/" ) #end
#if( $keyPathVariable != "" ) #set( $keyPathVariable = $keyPathVariable + ", " ) #end
#if( $keyGetterToArg != "" ) #set( $keyGetterToArg = $keyGetterToArg + ", " ) #end
#set( $keyURLPath = $keyURLPath+"{"+${link.formatedName(0)}+"_"+${field.formatedName(0)}+"}" )
#set( $keyPathVariable = $keyPathVariable+"@PathVariable("""+${link.formatedName(0)}+"_"+${field.formatedName(0)}+""") "+${field.wrapperType}+" "+${link.formatedName(0)}+"_"+${field.formatedName(0)} )
#set( $keyGetterToArg = $keyGetterToArg+${entity.name.toLowerCase()}+"."+${link.getter}+"()."+${field.getter}+"()" )
#end
#end
#end
#else
#set( $keyURLPath = $keyURLPath+"{"+${keyName}+"}" )
#set( $keyPathVariable = $keyPathVariable+"@PathVariable("""+${keyName}+""") "+${keyType}+" "+${keyName} )
#set( $keyGetterToArg = $keyGetterToArg+${entity.name.toLowerCase()}+"."+${keyGetter}+"()" )
#end
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};

import java.util.List;
#foreach( $import in $entity.imports )
import $import;
#end

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.stereotype.Controller;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import ${ENTITY_PKG}.${beanClass.name};
## Clé primaire
#if ( $beanClass.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${beanClass.name}Id;
#end
import ${ROOT_PKG}.service.${beanClass.name}Service;
## Lien vers les entités
#foreach( $link in $entity.selectedLinks )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
import ${ROOT_PKG}.service.${link.targetEntity}Service;
#end
#end
import ${ROOT_PKG}.web.bean.Message;
import ${ROOT_PKG}.web.bean.TypeMessage;
import ${ROOT_PKG}.web.helper.ControllerHelper;

/**
 * ${beanClass.name}.
 */
@Controller
@RequestMapping("/${beanClass.name.toLowerCase()}")
public class ${beanClass.name}Controller 
{
	@Resource
    private ${beanClass.name}Service ${beanClass.name.toLowerCase()}Service;
	@Resource
	private ControllerHelper controllerHelper;
## Lien vers les entités
#foreach( $link in $entity.selectedLinks )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
	@Resource
    private ${link.targetEntity}Service ${link.targetEntity.toLowerCase()}Service;
#end
#end

	void populateEditForm(Model uiModel, ${beanClass.name} ${beanClass.name.toLowerCase()}) {
		uiModel.addAttribute("${beanClass.name.toLowerCase()}", ${beanClass.name.toLowerCase()});
		// Listes déroulantes des objets liés
## Lien vers les entités
#foreach( $link in $entity.selectedLinks )
#isLinkUsedByFields( $link, $entity.attributes )
#if( $isLinkUsedByFields )
    	uiModel.addAttribute("${link.targetEntity.toLowerCase()}s", ${link.targetEntity.toLowerCase()}Service.loadAll());
#end
#end
	}

	@RequestMapping("/create")
	public String create(Model uiModel) {
		this.populateEditForm(uiModel, new ${beanClass.name}());
		return "${beanClass.name.toLowerCase()}/edit";
	}

	@RequestMapping()
	public String list(Model uiModel) {
		List<${beanClass.name}> list = ${beanClass.name.toLowerCase()}Service.loadAll();
		uiModel.addAttribute("list${beanClass.name}s", list);
		return "${beanClass.name.toLowerCase()}/list";
	}

	@RequestMapping(method = RequestMethod.PUT)
	public String save(@Valid ${beanClass.name} ${beanClass.name.toLowerCase()}, BindingResult result, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		if (!result.hasErrors()) {
			${beanClass.name.toLowerCase()} = ${beanClass.name.toLowerCase()}Service.save(${beanClass.name.toLowerCase()});
			redirectAttributes.addFlashAttribute("message", new Message(TypeMessage.SUCCESS,"save.ok"));
			return "redirect:/${beanClass.name.toLowerCase()}/"+controllerHelper.encodeUrlPathSegments(httpServletRequest, $keyGetterToArg);
		} else {
			return "${beanClass.name.toLowerCase()}/edit";
		}
	}

	@RequestMapping(value = "/${keyURLPath}")
	public String edit(Model uiModel, $keyPathVariable) {
#if ( $entity.hasCompositePrimaryKey() )
		$keyType ${keyType.toLowerCase()} = new $keyType();
## FIELDS
#foreach( $field in $entity.keyAttributes )
#isFieldUsedInLinks( $field, $entity.selectedLinks )
#if( ! $isFieldUsedInLinks )
		${keyType.toLowerCase()}.${field.setter}(${field.formatedName(0)});
#end
#end
## LINKS
#foreach( $link in $entity.selectedLinks )
#isLinkUsedByFields( $link, $entity.keyAttributes )
#if( $isLinkUsedByFields )
#set( $linkEntity = $model.getEntityByClassName($link.targetEntity) )
#foreach( $field in $linkEntity.keyAttributes )
		${keyType.toLowerCase()}.${link.setter}(${linkEntity.name.toLowerCase()}Service.load(${link.formatedName(0)}_${field.formatedName(0)}));
#end
#end
#end
		${beanClass.name} ${beanClass.name.toLowerCase()} = ${beanClass.name.toLowerCase()}Service.load(${keyType.toLowerCase()});
#else
		${beanClass.name} ${beanClass.name.toLowerCase()} = ${beanClass.name.toLowerCase()}Service.load(${keyName});
#end
		this.populateEditForm(uiModel, ${beanClass.name.toLowerCase()});
		return "${beanClass.name.toLowerCase()}/edit";
	}

	@RequestMapping(value = "/delete/${keyURLPath}")
	public String delete(Model uiModel, $keyPathVariable) {
#if ( $entity.hasCompositePrimaryKey() )
		$keyType ${keyType.toLowerCase()} = new $keyType();
## FIELDS
#foreach( $field in $entity.keyAttributes )
#isFieldUsedInLinks( $field, $entity.selectedLinks )
#if( ! $isFieldUsedInLinks )
		${keyType.toLowerCase()}.${field.setter}(${field.formatedName(0)});
#end
#end
## LINKS
#foreach( $link in $entity.selectedLinks )
#isLinkUsedByFields( $link, $entity.keyAttributes )
#if( $isLinkUsedByFields )
#set( $linkEntity = $model.getEntityByClassName($link.targetEntity) )
#foreach( $field in $linkEntity.keyAttributes )
		${keyType.toLowerCase()}.${link.setter}(${linkEntity.name.toLowerCase()}Service.load(${link.formatedName(0)}_${field.formatedName(0)}));
#end
#end
#end
		${entity.name.toLowerCase()}Service.delete(${keyType.toLowerCase()});
#else
		${entity.name.toLowerCase()}Service.delete(${keyName});
#end
		return "redirect:/${beanClass.name.toLowerCase()}";
	}
	
}
