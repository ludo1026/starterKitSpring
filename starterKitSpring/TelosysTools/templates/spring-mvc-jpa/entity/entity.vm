##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Mapped fields = fields in Primary Key or not in selected Links    
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
## Champs qui sont dans les liens
#macro( isFieldUsedInLinks, $field, $links )
#set( $isFieldUsedInLinks = false )
#foreach( $link in $links )
#if( $link.hasJoinColumns() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $isFieldUsedInLinks = true )
#end
#end
#end
#end
#end
## Liens utilisant les champs
#macro( isLinkUsedByFields, $link, $fields)
#set( $isLinkUsedByFields = false )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
#foreach( $field in $fields )
#if( $link.hasJoinColumns() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $isLinkUsedByFields = true )
#end
#end
#end
#end
#end
#end
## Liens correspondants aux champs
#macro( linksForField, $links, $field)
#set( $linksForField = [] )
#foreach( $link in $links )
#if( $link.hasJoinColumns() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $ttt = $linksForField.add($link) )
#end
#end
#end
#end
#end
#macro( linksForFields, $links, $fields)
#set( $linksForFields = [] )
#foreach( $field in $fields )
#foreach( $link in $links )
#if( $link.hasJoinColumns() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $ttt = $linksForFields.add($link) )
#end
#end
#end
#end
#end
#end
## Champs correspondants aux liens
#macro( fieldsForLink, $link, $fields)
#set( $fieldsForLink = [] )
#foreach( $field in $fields )
#if( $link.hasJoinColumns() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $ttt = $fieldsForLink.add($field) )
#end
#end
#end
#end
#end
#macro( fieldsForLinks, $links, $fields)
#set( $fieldsForLinks = [] )
#foreach( $link in $links )
#foreach( $field in $fields )
#if( $link.hasJoinColumns() )
#foreach( $joinColumn in $link.joinColumns )
#if( $joinColumn == $field.databaseName )
#set( $ttt = $fieldsForLinks.add($field) )
#end
#end
#end
#end
#end
#end
##/**
## * Get target entity fields. Use macro : fieldsForLinks
## * $entityCurrent current entity
## * $entityTarget target entity
## * $link link between current entity and target entity
## */
#macro( fieldsMappingForLink, $entityCurrent, $entityTarget, $link, $fieldsOfEntityCurrent )
#set( $fieldsMappingForLink = {})
#if( "$fieldsOfEntityCurrent" != "" )
## Link fields
#fieldsForLink( $link, $fieldsOfEntityCurrent )
#foreach( $fieldForLink in $fieldsForLink )
## Foreign keys of current entity
#foreach( $fk in $entityCurrent.databaseForeignKeys )
## Foreign key column
#foreach( $fkcol in $fk.columns )
## Search foreign key column for link field
#if( $fieldForLink.databaseName == $fkcol.columnName )
## Target entity field
#foreach( $fieldOfEntityTarget in $entityTarget.attributes )
## Search target entity field for foreign key
#if( $fieldOfEntityTarget.databaseName == $fkcol.referencedColumnName )
#set( $fieldsMappingForLink[${fieldForLink}] = ${fieldOfEntityTarget} )
#end
#end
#end
#end
#end
#end
#end
#end
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Id.java", $target.folder, "entity/entity_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end
##--- @Transient usage count ( number of xxxToMany links ) 
#set ( $TRANSIENT_COUNT = 0 )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end
/******
#set ( $bigList = $fn.concatLists($entity.keyAttributes, $entity.nonKeyAttributes) )
keyAttributes size = $fn.size( $entity.keyAttributes )
nonKeyAttributes size = $fn.size( $entity.nonKeyAttributes )
bigList size = $fn.size( $bigList )
#foreach( $field in $bigList )
. $field.name - $field.type
#end
******/
package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

#foreach( $import in $entity.imports )
import $import;
#end
#if( $linkFields )
import java.util.List;
#end

#foreach( $import in $jpa.imports($entity) )
import $import;
#end
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
#if (  $TRANSIENT_COUNT > 0 ) 
import javax.xml.bind.annotation.XmlTransient;
#end

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author Telosys Tools Generator
 *
 */
@XmlRootElement  // JAXB annotation for REST Web Services
@XmlAccessorType(XmlAccessType.PROPERTY) // JAXB accessor = getter/setter pair
## $entity.jpaAnnotations
$jpa.entityAnnotations(0,$entity)
// Define named queries here
// @NamedQueries ( {
//  @NamedQuery ( name="${entity.name}.query1", query="SELECT x FROM ${entity.name} x WHERE  " ),
//  @NamedQuery ( name="${entity.name}.query2", query="SELECT x FROM ${entity.name} x WHERE  " )
// } )
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ${entity.name}Id id ;

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
##$field.jpaAnnotations(4)
$jpa.fieldAnnotations(4,$field)
    private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

#end

    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
## $field.jpaAnnotations(4)
##     private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
##     
## #else
##     // "$field.name" (column "$field.databaseName") is not mapped as an attribute because it is used in a link   
##     
## #end
##$field.jpaAnnotations(4)
$jpa.fieldAnnotations(4,$field)
    private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end
#foreach( $field in $linkFields )
	// "$field.name" (column "$field.databaseName") is not defined by itself because used as FK in a link 
#end


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
## $link.jpaAnnotations(4)
$jpa.linkAnnotations(4, $link, $allMappedFields )
    private $link.formatedType(10) $link.formatedName(12);

#end

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ${entity.name}()
    {
		super();
#if ( $entity.hasCompositePrimaryKey() )        
		this.id = new ${entity.name}Id();       
#end
    }
    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
	public ${entity.name}Id getId() {
        return id;
    }
 
    public void setId(${entity.name}Id id) {
        this.id = id;
    }

#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.id.${field.setter}( $field.name ) ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.id.${field.getter}() ;
    }
#end
#end

#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end
#end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end

## #end  
#end  

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() ) 
    @XmlTransient
#end
#if ( $link.setter )    public void ${link.setter}( ${link.linkType} ${link.javaName} )
    {
#fieldsMappingForLink( $entity, $model.getEntityByClassName($link.targetEntityType), $link, $allMappedFields )
#foreach( $fieldMappingForLink in $fieldsMappingForLink.entrySet() )
		this.${fieldMappingForLink.key.setter}(${link.javaName}.${fieldMappingForLink.value.getter}());
#end
        this.${link.javaName} = ${link.javaName};
    }
#end
#if ( $link.getter )    public ${link.linkType} ${link.getter}()
    {
        return this.${link.javaName};
    }
#end

#end  

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString()
    {
#set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT, $const.NOT_IN_SELECTED_LINKS ) )    
$entity.toStringMethodCodeLinesWithKey(8, $attributes, "id") 
## The "key" is used only if composite key
#foreach( $field in $entity.getAttributesByCriteria( $const.TEXT ) )
		// $field.name is not in toString because it's a "long text" field
#end  
    }

}
