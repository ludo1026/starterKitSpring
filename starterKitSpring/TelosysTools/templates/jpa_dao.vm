/*
 * D.A.O. for JPA  
 * Created on 22 mai 2013 ( Time 15:26:18 )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import ${ENTITY_PKG}.${beanClass.name};
import org.telosys.starterkits.springjpa.CoreUtils;
import org.telosys.starterkits.springjpa.GenericJpaDao;

#if ( $beanClass.hasCompositePrimaryKey() )
import org.demo.${beanClass.name.toLowerCase()}.bean.${beanClass.name}Key;
#set( $keyType = "${beanClass.name}Key" )
#set( $keyName = "id" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.wrapperType" )
#set( $keyName = "$field.formatedName(0)" )
#end
#end

public class ${beanClass.name}DAO extends GenericJpaDao<${beanClass.name}, $keyType> {

	private static final Predicate[] ap = {};
	
	/**
	 * Constructs a DAO for ${beanClass.name}
	 */
	public ${beanClass.name}DAO() {
		super(${beanClass.name}.class);
	}
	
	/**
	 * Search by ${beanClass.name} example
	 */
	public List<${beanClass.name}> search(final ${beanClass.name} element) {
		final EntityManager em = getEntityManager();
		if ( element != null  ) {
			CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();
			CriteriaQuery<${beanClass.name}> criteriaQuery = criteriaBuilder.createQuery(${beanClass.name}.class);
			Root<${beanClass.name}> from = criteriaQuery.from(${beanClass.name}.class);

			List<Predicate> listP = new ArrayList<Predicate>();

#foreach( $field in $entity.keyAttributes )
			if (CoreUtils.isNotBlank(element.${field.getter}())) {
				Predicate predicate = criteriaBuilder.equal(from.get("${field.name.toLowerCase()}"), element.${field.getter}());
				listP.add(predicate);
			}
#end
			
			criteriaQuery.where(listP.toArray(ap));
			TypedQuery<${beanClass.name}> tq = em.createQuery(criteriaQuery);
			return tq.getResultList();
		}
		else
		{
    		return this.loadAll();
		}
	}

}